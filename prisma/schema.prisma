// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String               @id @default(uuid())
  username            String               @unique @db.VarChar(255)
  email               String               @unique @db.VarChar(255)
  hashedPassword      String               @map("hashed_password")
  active              Boolean              @default(false)
  confirmedEmail      Boolean              @default(false) @map("confirmed_email")
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @default(now()) @updatedAt @map("updated_at")
  usernameUpdatedAt   DateTime?            @map("username_updated_at")
  changeEmailRequests ChangeEmailRequest[]
  roles               UserRole[]

  @@map("users")
}

model ChangeEmailRequest {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  oldEmail  String   @map("old_email")
  newEmail  String   @map("new_email")
  token     String
  isUsed    Boolean  @default(false) @map("is_used")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("change_email_requests")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique @db.VarChar(255)
  description String           @db.VarChar(255)
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @default(now()) @updatedAt @map("updated_at")
  users       UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String           @unique @db.VarChar(255)
  description String           @db.VarChar(255)
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @default(now()) @updatedAt @map("updated_at")
  roles       RolePermission[]

  @@map("permissions")
}

model UserRole {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime @default(now()) @map("created_at")

  @@id([userId, roleId])
  @@map("users_roles")
}

model RolePermission {
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  createdAt    DateTime   @default(now()) @map("created_at")

  @@id([permissionId, roleId])
  @@map("roles_permissions")
}
